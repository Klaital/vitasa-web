swagger: '2.0'
info:
  version: 1.0.0
  title: VITA Sites App Web APIs
  description: Volunteer Income Tax Assistance Web Services for managing sites.
  contact:
    name: Chris Cox
    email: chriscox@abandonedfactory.net
    url: 'https://vitasa.abandonedfactory.net'
  license:
    name: Apache
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
host: vitasa.abandonedfactory.net
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /sites:
    get:
      description: Fetch a list of all Tax Prep Assistance sites
      operationId: GetSiteList
      responses:
        '200':
          description: Successfully fetched site list
          schema:
            type: array
            items:
              $ref: '#/definitions/site'
    post:
      description: Create a new Site. Must be logged in as Admin.
      operationId: CreateSite
      responses:
        '200':
          description: Successfully created a new Site
          schema:
            $ref: '#/definitions/site'
        '401':
          description: Not logged in as Admin
  '/sites/{slug}':
    parameters:
      - name: slug
        in: path
        description: ID of Site to fetch
        required: true
        type: string
    get:
      description: Fetch a single Site's details
      operationId: GetSiteDetails
      responses:
        '200':
          description: Successfully fetched site details
          schema:
            $ref: '#/definitions/site'
    put:
      description: >-
        Update a Site's details. Must be logged in as Admin or the specific
        site's Coordinator
      operationId: UpdateSiteDetails
      responses:
        '200':
          description: Successfully updated site status
          schema:
            $ref: '#/definitions/site'
        '401':
          description: Not logged in as Admin or correct Coordinator
          schema:
            $ref: '#/definitions/unauthorized'
    delete:
      description: Delete a Site record. Must be logged in as Admin
      operationId: DeleteSite
      responses:
        '200':
          description: Successfully deleted site.
        '401':
          description: Not logged in as Admin.
          schema:
            $ref: '#/definitions/unauthorized'
  '/sites/{slug}/calendars':
    parameters:
      - name: slug
        in: path
        description: ID of Site to fetch
        required: true
        type: string
    get:
      description: Fetch an array of calendar overrides for this site.
      operationId: GetSiteCalendars
      responses:
        '200':
          description: Successfully fetched site calendar overrides.
          schema:
            $ref: '#/definitions/calendar'
    post:
      description: Add a calendar override to this site.
      operationId: AddSiteCalendar
      responses:
        '200':
          description: Successfully added calendar override to the site.
          schema:
            $ref: '#/definitions/calendar'
  /users:
    get:
      description: Fetch a list of Users. Must be logged in as Admin.
      operationId: ListUsers
      responses:
        '200':
          description: Successfully fetched User list
          schema:
            type: array
            items:
              $ref: '#/definitions/userDetails'
        '401':
          description: Not logged in as Admin.
    post:
      parameters: 
        - name: user
          in: body
          description: The required user signup data
          schema:
            $ref: '#/definitions/newUser'
      description: >-
        Create a new user. The new user will get the NewUser Role until approved
        by an admin.
      operationId: CreateUser
      responses:
        '200':
          description: Successfully created a new user.
          schema:
            $ref: '#/definitions/userDetails'
        '400':
          description: >-
            Bad Request. Did not send all required fields, or the password did
            not match the confirmation field.
  '/users/{id}':
    parameters:
      - name: id
        in: path
        description: ID of User to fetch
        required: true
        type: integer
    get:
      description: >-
        Fetch user details. Must be logged in as either Admin, or the User with
        the requested ID.
      operationId: GetUserDetails
      responses:
        '200':
          description: Successfully fetched user details.
          schema:
            $ref: '#/definitions/userDetails'
        '401':
          description: Not logged in as an authrorized user.
    put:
      description: >-
        Update user status. If logged in as Admin, this can be used to alter the
        user's role grants. If logged in as the same user, this can be used to
        change the account password.
      operationId: UpdateUser
      parameters:
        - name: user
          in: body
          description: User to log in
          required: true
          schema:
            $ref: '#/definitions/updateUser'
      responses:
        '200':
          description: Successfully updated user settings.
          schema:
            $ref: '#/definitions/userDetails'
        '401':
          description: >-
            Not logged in, or logged-in user is not authorized to change the
            specified fields.
    delete:
      description: Destroy the specified user record. Must be logged in as Admin.
      operationId: DeleteUser
      responses:
        '200':
          description: Successfully deleted user.
        '401':
          description: Not authorized to delete this user.
          
  '/users/{user_id}/signups':
    parameters:
      - name: user_id
        in: path
        description: ID of the User
        required: true
        type: integer
    get: 
      description: Fetch the user's future commitments to volunteer.
      operationId: GetUserSignups
      responses:
        '200':
          description: Successful query.
          schema:
            type: array
            items:
              $ref: '#/definitions/signup'
        '400':
          description: Bad request.
        '404':
          description: Invalid resource - probably an invalid User ID.
    post:
      description: Sign up to Volunteer at a particular site on a particular day.
      operationId: CreateUserSignup
      parameters:
        - name: signup
          in: body
          description: Date and Location that the user is volunteering to help.
          schema:
            $ref: '#/definitions/signup'
      responses:
        '200':
          description: Successfully submitted SignUp.
          schema:
            $ref: '#/definitions/signup'
        '400':
          description: Bad request. Check that the date is in the future, and that the site slug is valid.
        '404': 
          description: Invalid resource - probably an invalid User ID.
  '/users/{user_id}/signups/{signup_id}':
    parameters:
      - name: user_id
        in: path
        description: ID of the User
        required: true
        type: integer
      - name: signup_id
        in: path
        description: ID of the particular SignUp to be updated
        required: true
        type: integer
    get:
      description: Fetch details for this SignUp record.
      operationId: GetUserSignupDetails
      responses:
        '200':
          description: Successfully fetched details.
          schema:
            $ref: '#/definitions/signup'
        '404':
          description: Invalid resource. Either the user_id or signup_id are invalid.
    put:
      description: Update the details of this SignUp.
      operationId: UpdateUserSignup
      responses:
        '200':
          description: Successfully updated this SignUp.
          schema:
            $ref: '#/definitions/signup'
        '404':
          description: Invalid resource. Either the user_id or signup_id are invalid.
    delete:
      description: Delete this SignUp
      operationId: DeleteUserSignup
      responses:
        '200':
          description: Successfully deleted this SignUp.
        '404':
          description: Invalid resource. Either the user_id or signup_id are invalid.
  /notifications:
    get:
      description: Fetch a list of all active notifications.
      operationId: GetNotifications
      responses:
        '200':
          description: Successfully fetched all active notifications
          schema:
            type: array
            items:
              $ref: '#/definitions/notification'
    post:
      description: Create a notification
      operationId: CreateNotification
      parameters:
        - name: notification
          in: body
          description: The notification details
          schema:
            $ref: '#/definitions/notification'
      responses:
        '200':
          description: Successfully created a notification
          schema:
            $ref: '#/definitions/notification'
        '400':
          description: Bad request. Missing text or date not in the future.
  '/notifications/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Notification to update
        required: true
        type: integer
    get:
      description: Fetch the Notification details
      operationId: GetNotificationDetails
      responses:
        '200':
          description: Successfully updated the notification
          schema:
            $ref: '#/definitions/notification'
        '404':
          description: Invalid resource - the ID was not a valid Notification ID
    put:
      description: Update the Notification data.
      operationId: UpdateNotificationDetails
      responses:
        '200':
          description: Successfully updated the notification
          schema:
            $ref: '#/definitions/notification'
        '404':
          description: Invalid resource - the ID was not a valid Notification ID
    delete:
      description: Delete the Notification
      operationId: DeleteNotification
      responses:
        '200':
          description: Successfully deleted the notification
        '404':
          description: Invalid resource - the ID was not a valid Notification ID
  /suggestions:
    get:
      description: Fetch a list of all suggestions.
      operationId: GetSuggestions
      responses:
        '200':
          description: Successfully fetched all suggestions
          schema:
            type: array
            items:
              $ref: '#/definitions/suggestion'
    post:
      description: Create a Suggestion
      operationId: CreateSuggestion
      parameters:
        - name: suggestion
          in: body
          description: The suggestion details
          schema:
            $ref: '#/definitions/suggestion'
      responses:
        '200':
          description: Successfully created a suggestion
          schema:
            $ref: '#/definitions/suggestion'
        '400':
          description: Bad request. Missing text or status field.
  '/suggestions/{id}':
    parameters:
      - name: id
        in: path
        description: ID of the Suggestion to update
        required: true
        type: integer
    get:
      description: Fetch the Suggestion details
      operationId: GetSuggestionDetails
      responses:
        '200':
          description: Successfully updated the suggestion
          schema:
            $ref: '#/definitions/suggestion'
        '404':
          description: Invalid resource - the ID was not a valid Suggestion ID
    put:
      description: Update the Suggestion data.
      operationId: UpdateSuggestionDetails
      responses:
        '200':
          description: Successfully updated the suggestion
          schema:
            $ref: '#/definitions/suggestion'
        '404':
          description: Invalid resource - the ID was not a valid Suggestion ID
    delete:
      description: Delete the Suggestion
      operationId: DeleteSuggestion
      responses:
        '200':
          description: Successfully deleted the suggestion
        '404':
          description: Invalid resource - the ID was not a valid Suggestion ID
    
  /login:
    post:
      description: Logs a user in. Pass in the user's email and password via JSON.
      operationId: loginUser
      parameters:
        - name: user
          in: body
          description: User to log in
          required: true
          schema:
            $ref: '#/definitions/loginUser'
      responses:
        '200':
          description: User Logged In
          schema:
            properties:
              message:
                type: string
        '401':
          description: Bad credentials
          schema:
            properties:
              errors:
                type: string
                
definitions:
  signup:
    description: A Volunteer creates a Signup record to signal his intent to work a particular site on a particular date.
    required:
      - date
      - site
    properties:
      id:
        type: integer
        description: Auto-generated unique identifier for this record. Generated and returned when the POST operation is executed.
        example: 43
      site:
        type: string
        description: The Site Slug where the User intends to work
        example: the-alamo
      date:
        type: string
        format: date
        description: The day on which the user is volunteering to work
        example: 2018-02-20
  work_history:
    description: A Signup that is in the past. It should have Hours worked, and can be Approved by the Site Coordinator.
    required:
      - date
      - site
      - hours
      - approved
    properties:
      id:
        type: integer
        description: Auto-generated unique identifier for this record. Generated and returned when the POST operation is executed.
        example: 43
      site:
        type: string
        description: The Site Slug where the User intends to work
        example: the-alamo
      date:
        type: string
        format: date
        description: The day on which the user is volunteering to work
        example: 2017-02-20
      hours:
        type: float
        description: The number of hours worked at this site on the specified day.
        example: 4.5
      approved:
        type: boolean
        description: Indicates whether the Site Coordinator has agreed that the hours recorded are correct.
        example: true
  suggestion:
    description: A suggestion for improvement, either to the VITA program or to the software tools.
    properties:
      id:
        type: integer
        example: 42
      text:
        type: string
        example: It would be nice if the website was less ugly.
      user:
        type: integer
        description: The ID for the User who created the suggestion.
        example: 6
  notification:
    description: A push notification sent to one or more Users
    required:
      - text
    properties:
      id:
        type: integer
        example: 1
      text:
        type: string
        example: Alert! The Alamo site will be unavailable next Thursday!
  unauthorized:
    description: >-
      Returned when an API is called without a Cookie identifying a User with
      appropriate permissions for the requested operation.
    properties:
      errors:
        type: string
        example: Unauthorized
  site:
    required:
      - slug
      - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: The Alamo
      slug:
        type: string
        example: the-alamo
      street:
        type: string
        example: 300 Alamo Plaza
      city:
        type: string
        example: San Antonio
      state:
        type: string
        example: TX
      zip:
        type: string
        example: '78205'
      latitude:
        type: string
        example: '29.425731'
        description: The latitude half of the site's GPS coordinates
      longitude:
        type: string
        example: '-98.486292'
        description: The longitude half of the site's GPS coordinates
      google_place_id:
        type: string
        example: ChIJX4k2TVVfXIYRIsTnhA-P-Rc
        description: The site's Place ID for use with Google's Maps APIs.
      sitecoordinator:
        description: 'The User ID for the Site Coordinator. Use with GET /users/{id}'
        type: integer
        example: 1
      backup_coordinator:
        description: 'The User ID for the Site backup Site Coordinator.'
        type: integer
        example: 2
      sitestatus:
        type: string
        example: Open
        enum:
          - Closed
          - Accepting
          - NearLimit
          - NotAccepting
      calendars:
        type: array
        items:
          $ref: '#/definitions/calendar'
      work_history:
        type: array
        description: The work already performed at this site.
        items:
          $ref: '#/definitions/work_history'
      work_intents:
        type: array
        description: The volunteers scheduled to work at this site
        items:
          $ref: '#/definitions/signup'
      
  calendar:
    description: >-
      A single calendar entry for a single site, overriding their open hours for
      the day. When 'is_closed=true', this indicats that the site will be
      closed, despite usually being open that day according to the site default
      hours.
    required:
      - id
      - open
      - is_closed
    properties:
      id:
        type: integer
        example: 1
        description: Unique identifier for this particular Calendar entry.
      date:
        type: string
        format: date
        example: '2017-08-10'
        description: The date for the override.
      open:
        type: string
        format: time
        example: '09:30:00'
        description: >-
          What time the site opens for the day. Only the date portion is
          relevant when is_closed=true.
      close:
        type: string
        format: time
        example: '17:30:00'
        description: What time the site opens for the day. Ignored when is_closed=true.
      is_closed:
        type: boolean
        example: false
        description: >-
          Indicates whether the site's calendar override for the day is to be
          closed, where the site's default hours would have indicated open for
          the day.
      backup_coordinator_today:
        type: boolean
        example: false
        description: Indicates whether the backup Site Coordinator is expected to be in charge on this day.
  newCalendar:
    description: >-
      A single calendar entry for a single site, overriding their open hours for
      the day. Set 'is_closed=true' to indicate that the site will be closed,
      despite usually being open that day according to the site default hours.
    required:
      - open
      - site_slug
    properties:
      site_slug:
        type: string
        example: the-alamo
        description: The Site this calendar overrides the hours for.
      open:
        type: string
        format: dateTime
        example: '2017-08-08T09:30:00-0500'
        description: >-
          What time the site opens for the day. Only the date portion is
          relevant when is_closed=true.
      close:
        type: string
        format: dateTime
        example: '2017-08-08T17:30:00-0500'
        description: What time the site opens for the day. Ignored when is_closed=true.
      is_closed:
        type: boolean
        example: false
        description: >-
          Indicates whether the site's calendar override for the day is to be
          closed, where the site's default hours would have indicated open for
          the day.
      backup_coordinator_today:
        type: boolean
        example: false
        description: Indicates whether the backup Site Coordinator is expected to be in charge on this day.
  userDetails:
    required:
      - id
      - email
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        example: user-one@example.org
        format: email
      sites:
        type: array
        description: Site Slugs
        items:
          type: string
          example: the-alamo
      roles:
        type: array
        description: User Role Grants
        example:
          - SiteCoordinator
          - Admin
        items:
          type: string
          enum:
            - NewUser
            - SiteCoordinator
            - SiteCoordinatorInactive
            - Admin
            - Volunteer
            - Reviewer
      work_history:
        type: array
        description: The work already performed by this user.
        items:
          $ref: '#/definitions/work_history'
      work_intents:
        type: array
        description: This volunteer's scheduled work.
        items:
          $ref: '#/definitions/signup'
      certification:
        type: string
        enum:
          - None
          - Basic
          - Advanced
          - SiteCoordinator
      phone:
        type: string
        description: User's contact phone number
        example: 425-555-5555
  newUser:
    required:
      - email
      - password
      - password_confirmation
    properties:
      email:
        type: string
        format: email
        example: user@example.org
      password:
        type: string
        format: password
        example: myawesomepassword
      password_confirmation:
        type: string
        format: password
        example: myawesomepassword
  loginUser:
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
        example: myawesomepassword

  updateUser:
    description: Models the request to update a user's settings. Can include roles only if the requesting user is logged in as Admin.
    required:
      - email
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        example: "myawesomepassword"
        format: password
      password_confirmation:
        type: string
        example: "myawesomepassword"
        format: password
      roles:
        type: array
        example: [ SiteCoordinatorInactive, Admin ]
        items:
          type: string
          enum:
            - NewUser
            - SiteCoordinator
            - SiteCoordinatorInactive
            - Admin