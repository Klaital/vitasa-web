swagger: '2.0'
info:
  version: 1.0.0
  title: VITA Sites App Web APIs
  description: Volunteer Income Tax Assistance Web Services for managing sites.
  contact:
    name: Chris Cox
    email: chriscox@abandonedfactory.net
    url: 'https://vitasa.abandonedfactory.net'
  license:
    name: Apache
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
host: vitasa.abandonedfactory.net
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /sites:
    get:
      description: Fetch a list of all Tax Prep Assistance sites
      operationId: GetSiteList
      responses:
        '200':
          description: Successfully fetched site list
          schema:
            type: array
            items:
              $ref: '#/definitions/site'
    post:
      description: Create a new Site. Must be logged in as Admin.
      operationId: CreateSite
      responses:
        '200':
          description: Successfully created a new Site
          schema:
            $ref: '#/definitions/site'
        '401':
          description: Not logged in as Admin
  '/sites/{slug}':
    parameters:
      - name: slug
        in: path
        description: ID of Site to fetch
        required: true
        type: string
    get:
      description: Fetch a single Site's details
      operationId: GetSiteDetails
      responses:
        '200':
          description: Successfully fetched site details
          schema:
            $ref: '#/definitions/site'
    put:
      description: >-
        Update a Site's details. Must be logged in as Admin or the specific
        site's Coordinator
      operationId: UpdateSiteDetails
      responses:
        '200':
          description: Successfully updated site status
          schema:
            $ref: '#/definitions/site'
        '401':
          description: Not logged in as Admin or correct Coordinator
          schema:
            $ref: '#/definitions/unauthorized'
    delete:
      description: Delete a Site record. Must be logged in as Admin
      operationId: DeleteSite
      responses:
        '200':
          description: Successfully deleted site.
        '401':
          description: Not logged in as Admin.
          schema:
            $ref: '#/definitions/unauthorized'
  '/sites/{slug}/calendars':
    parameters:
      - name: slug
        in: path
        description: ID of Site to fetch
        required: true
        type: string
    get:
      description: Fetch an array of calendar overrides for this site.
      operationId: GetSiteCalendars
      responses:
        '200':
          description: Successfully fetched site calendar overrides.
          schema:
            $ref: '#/definitions/calendar'
    post:
      description: Add a calendar override to this site.
      operationId: AddSiteCalendar
      responses:
        '200':
          description: Successfully added calendar override to the site.
          schema:
            $ref: '#/definitions/calendar'
  /users:
    get:
      description: Fetch a list of Users. Must be logged in as Admin.
      operationId: ListUsers
      responses:
        '200':
          description: Successfully fetched User list
          schema:
            type: array
            items:
              $ref: '#/definitions/userDetails'
        '401':
          description: Not logged in as Admin.
    post:
      description: >-
        Create a new user. The new user will get the NewUser Role until approved
        by an admin.
      operationId: CreateUser
      responses:
        '200':
          description: Successfully created a new user.
          schema:
            $ref: '#/definitions/newUser'
        '400':
          description: >-
            Bad Request. Did not send all required fields, or the password did
            not match the confirmation field.
  '/users/{id}':
    parameters:
      - name: id
        in: path
        description: ID of User to fetch
        required: true
        type: integer
    get:
      description: >-
        Fetch user details. Must be logged in as either Admin, or the User with
        the requested ID.
      operationId: GetUserDetails
      responses:
        '200':
          description: Successfully fetched user details.
          schema:
            $ref: '#/definitions/userDetails'
        '401':
          description: Not logged in as an authrorized user.
    put:
      description: >-
        Update user status. If logged in as Admin, this can be used to alter the
        user's role grants. If logged in as the same user, this can be used to
        change the account password.
      operationId: UpdateUser
      parameters:
        - name: user
          in: body
          description: User to log in
          required: true
          schema:
            $ref: '#/definitions/updateUser'
      responses:
        '200':
          description: Successfully updated user settings.
          schema:
            $ref: '#/definitions/userDetails'
        '401':
          description: >-
            Not logged in, or logged-in user is not authorized to change the
            specified fields.
    delete:
      description: Destroy the specified user record. Must be logged in as Admin.
      operationId: DeleteUser
      responses:
        '200':
          description: Successfully deleted user.
        '401':
          description: Not authorized to delete this user.
  /login:
    post:
      description: Logs a user in. Pass in the user's email and password via JSON.
      operationId: loginUser
      parameters:
        - name: user
          in: body
          description: User to log in
          required: true
          schema:
            $ref: '#/definitions/loginUser'
      responses:
        '200':
          description: User Logged In
          schema:
            properties:
              message:
                type: string
        '401':
          description: Bad credentials
          schema:
            properties:
              errors:
                type: string
definitions:
  unauthorized:
    description: >-
      Returned when an API is called without a Cookie identifying a User with
      appropriate permissions for the requested operation.
    properties:
      errors:
        type: string
        example: Unauthorized
  site:
    required:
      - slug
      - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: The Alamo
      slug:
        type: string
        example: the-alamo
      street:
        type: string
        example: 300 Alamo Plaza
      city:
        type: string
        example: San Antonio
      state:
        type: string
        example: TX
      zip:
        type: string
        example: '78205'
      latitude:
        type: string
        example: '29.425731'
        description: The latitude half of the site's GPS coordinates
      longitude:
        type: string
        example: '-98.486292'
        description: The longitude half of the site's GPS coordinates
      google_place_id:
        type: string
        example: ChIJX4k2TVVfXIYRIsTnhA-P-Rc
        description: The site's Place ID for use with Google's Maps APIs.
      sitecoordinator:
        description: 'The User ID for the Site Coordinator. Use with GET /users/{id}'
        type: integer
        example: 1
      backup_coordinator:
        description: 'The User ID for the Site\'s backup Site Coordinator.'
        type: integer
        example: 2
      sitestatus:
        type: string
        example: Open
        enum:
          - Open
          - Closed
          - Accepting
          - NearLimit
          - NotAccepting
      calendars:
        type: array
        items:
          $ref: '#/definitions/calendar'
  calendar:
    description: >-
      A single calendar entry for a single site, overriding their open hours for
      the day. When 'is_closed=true', this indicats that the site will be
      closed, despite usually being open that day according to the site default
      hours.
    required:
      - id
      - open
      - site_slug
      - is_closed
    properties:
      id:
        type: integer
        example: 1
        description: Unique identifier for this particular Calendar entry.
      date:
        type: string
        format: date
        example: '2017-08-10'
        description: The date for the override.
      open:
        type: string
        format: time
        example: '09:30:00'
        description: >-
          What time the site opens for the day. Only the date portion is
          relevant when is_closed=true.
      close:
        type: string
        format: time
        example: '17:30:00'
        description: What time the site opens for the day. Ignored when is_closed=true.
      is_closed:
        type: boolean
        example: false
        description: >-
          Indicates whether the site's calendar override for the day is to be
          closed, where the site's default hours would have indicated open for
          the day.
  newCalendar:
    description: >-
      A single calendar entry for a single site, overriding their open hours for
      the day. Set 'is_closed=true' to indicate that the site will be closed,
      despite usually being open that day according to the site default hours.
    required:
      - open
      - site_slug
    properties:
      site_slug:
        type: string
        example: the-alamo
        description: The Site this calendar overrides the hours for.
      open:
        type: string
        format: dateTime
        example: '2017-08-08T09:30:00-0500'
        description: >-
          What time the site opens for the day. Only the date portion is
          relevant when is_closed=true.
      close:
        type: string
        format: dateTime
        example: '2017-08-08T17:30:00-0500'
        description: What time the site opens for the day. Ignored when is_closed=true.
      is_closed:
        type: boolean
        example: false
        description: >-
          Indicates whether the site's calendar override for the day is to be
          closed, where the site's default hours would have indicated open for
          the day.
  userDetails:
    required:
      - id
      - email
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        example: user-one@example.org
        format: email
      sites:
        type: array
        description: Site Slugs
        items:
          type: string
          example: the-alamo
      roles:
        type: array
        description: User Role Grants
        example:
          - SiteCoordinator
          - Admin
        items:
          type: string
          enum:
            - NewUser
            - SiteCoordinator
            - SiteCoordinatorInactive
            - Admin
  newUser:
    required:
      - email
      - password
      - password_confirmation
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
        example: myawesomepassword
      password_confirmation:
        type: string
        format: password
        example: myawesomepassword
  loginUser:
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
        example: myawesomepassword

  updateUser:
    description: Models the request to update a user's settings. Can include roles only if the requesting user is logged in as Admin.
    required:
      - email
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        example: "myawesomepassword"
        format: password
      password_confirmation:
        type: string
        example: "myawesomepassword"
        format: password
      roles:
        type: array
        example: [ SiteCoordinatorInactive, Admin ]
        items:
          type: string
          enum:
            - NewUser
            - SiteCoordinator
            - SiteCoordinatorInactive
            - Admin